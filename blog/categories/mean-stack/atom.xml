<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MEAN_Stack | falconzy's Blog]]></title>
  <link href="http://falconzy.github.io/blog/categories/mean-stack/atom.xml" rel="self"/>
  <link href="http://falconzy.github.io/"/>
  <updated>2014-05-03T15:56:47+08:00</updated>
  <id>http://falconzy.github.io/</id>
  <author>
    <name><![CDATA[Ian Zhao]]></name>
    <email><![CDATA[ian@zhaoyan.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started Mongoose]]></title>
    <link href="http://falconzy.github.io/blog/2013/12/31/mongoose/"/>
    <updated>2013-12-31T23:50:48+08:00</updated>
    <id>http://falconzy.github.io/blog/2013/12/31/mongoose</id>
    <content type="html"><![CDATA[<h3>installation</h3>

<pre><code>$ npm install mongoose
</code></pre>

<h3>Connection</h3>

<pre><code>var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/tasks');
var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function callback () {
// conding here;
//Once connection opens,callback will be called here.
});
</code></pre>

<h3>Disconnect</h3>

<pre><code>mongoose.disconnect();
</code></pre>

<h3>REGISTERING A SCHEMA</h3>

<p>With Mongoose, everything is derived from a <em>Schema</em>.</p>

<pre><code>var Schema = mongoose.Schema;
var Tasks = new Schema({
        project: String,
        description: String
});
</code></pre>

<p>Next step is compiling our schema into a <em>Model</em>.</p>

<pre><code>mongoose.model('Task', Tasks);
</code></pre>

<h3>ADDING A TASK</h3>

<pre><code>var Task = mongoose.model('Task');
var task = new Task();
task.project = 'Bikeshed';
task.description = 'Paint the bikeshed red.';
task.save(function(err) {
    if (err) throw err;
    console.log('Task saved.');
});
</code></pre>

<h3>SEARCHING FOR A DOCUMENT</h3>

<pre><code>var Task = mongoose.model('Task');
Task.find({'project': 'Bikeshed'}).each(function(err, task) {
    if (task != null) {
        console.log('ID:' + task._id);
        console.log(task.description);
        } 
});
</code></pre>

<h3>UPDATING A DOCUMENT</h3>

<pre><code>var Task = mongoose.model('Task');
Task.update(
    {_id: '4e65b793d0cf5ca508000001'}, \\Update using internal ID
    {description: 'Paint the bikeshed green.'},
    {multi: false}, \\Only update one document
    function(err, rows_updated) {
        if (err) throw err;
        console.log('Updated.');
    }
);
</code></pre>

<h3>REMOVING A DOCUMENT</h3>

<pre><code>var Task = mongoose.model('Task');
    Task.findById('4e65b3dce1592f7d08000001', function(err, task) {
    task.remove();
});
</code></pre>

<h3>Extra</h3>

<p>add <em>methods</em> to our documents:</br>
<strong>methods must be added to the schema before compiling it with mongoose.model()</strong></p>

<pre><code>Tasks.methods.list = function () {
var greeting = this.name
    ? "Meow name is " + this.name
    : "I don't have a name"
    console.log(greeting);
}
var Kitten = mongoose.model('Kitten', kittySchema)
</code></pre>

<p><em>Functions</em> added to the <em>methods</em> property of a schema get compiled into the Model prototype and exposed on each document instance:</p>

<pre><code>var fluffy = new Kitten({ name: 'fluffy' });
fluffy.speak() // "Meow name is fluffy"
</code></pre>

<p>Each document can be saved to the database by calling its <em>save</em> method. The first argument to the callback will be an error if any occured.</p>

<pre><code>fluffy.save(function (err, fluffy) {
    if (err) // TODO handle the error
    fluffy.speak();
});
</code></pre>

<p>We can access all of the documents through model.</p>

<pre><code>Kitten.find(function (err, kittens) {
    if (err) // TODO handle err
    console.log(kittens)
})
</code></pre>

<p>filter by name, Mongoose supports MongoDBs rich <em>querying syntax</em>.</p>

<pre><code>Kitten.find({ name: /^Fluff/ }, callback)
</code></pre>

<p>This performs a search for all documents with a name property that begins with &ldquo;Fluff&rdquo; and returns the results to the callback.</p>
]]></content>
  </entry>
  
</feed>
