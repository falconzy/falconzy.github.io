<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[falconzy's Blog]]></title>
  <link href="http://falconzy.github.io/atom.xml" rel="self"/>
  <link href="http://falconzy.github.io/"/>
  <updated>2014-01-09T20:34:31+08:00</updated>
  <id>http://falconzy.github.io/</id>
  <author>
    <name><![CDATA[Ian Zhao]]></name>
    <email><![CDATA[ian@zhaoyan.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test-Driven Development in Node.js With Mocha]]></title>
    <link href="http://falconzy.github.io/blog/2014/01/09/tdd/"/>
    <updated>2014-01-09T20:27:20+08:00</updated>
    <id>http://falconzy.github.io/blog/2014/01/09/tdd</id>
    <content type="html"><![CDATA[<h3>Reference</h3>

<ul>
<li><a href="http://webapplog.com/test-driven-development-in-node-js-with-mocha/">Test-Driven Development in Node.js With Mocha</a></li>
<li><a href="http://www.codemag.com/Article/1308061">Asynchronous, Test-Driven Development, with JavaScript and Mocha</a></li>
<li><a href="http://phawk.co.uk/blog/testing-node-apps-with-mocha">Testing node.js apps with mocha</a></li>
<li><a href="http://visionmedia.github.io/mocha/#getting-started">Mocha Offical Page</a></li>
<li><a href="http://redotheweb.com/2013/01/15/functional-testing-for-nodejs-using-mocha-and-zombie-js.html">Functional Testing For Node.js Using Mocha and Zombie.js</a></li>
<li><a href="http://visionmedia.github.io/superagent/">SuperAgent</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/testing-in-node-js/">Testing in Node.js</a></li>
<li><a href="http://chaijs.com/">Chai Assertion Library</a></li>
</ul>


<h3>package.json devDependancies</h3>

<pre><code>devDependencies: {
  "chai": "*",
  "mocha": "*" // our preference, but you can use any test runner you like
}
</code></pre>

<h3>Mocha structure</h3>

<ul>
<li><strong>describe()</strong> is used to group together similar tests in Mocha</li>
<li><strong>It()</strong> describes a specific use-case for the method being tested.</li>
<li><strong>done()</strong> callback &ndash; Testing asynchronous code</li>
<li><strong>before()</strong>, <strong>after()</strong>, <strong>beforeEach()</strong>, <strong>afterEach()</strong> &ndash; hooks to setup the test case</li>
<li><strong>Pending tests</strong> &ndash;  without a callback</li>
</ul>


<h3>chai BDD styles</h3>

<p><a href="http://chaijs.com/api/bdd/">API Reference</a></p>

<pre><code>var expect = chai.expect;
expect(foo).to.be.a('string');
expect(foo).to.equal('bar');
expect(foo).to.have.length(3);
expect(tea).to.have.property('flavors')
    .with.length(3);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 3 - Tips]]></title>
    <link href="http://falconzy.github.io/blog/2014/01/06/sublime-text-3-tips/"/>
    <updated>2014-01-06T00:44:49+08:00</updated>
    <id>http://falconzy.github.io/blog/2014/01/06/sublime-text-3-tips</id>
    <content type="html"><![CDATA[<h3>Sublime Text 3 Reference</h3>

<ul>
<li><a href="http://docs.sublimetext.info/en/sublime-text-3/">Sublime Text Unofficial Documentation</a></li>
<li><a href="http://scotch.io/bar-talk/sublime-text-keyboard-shortcuts">Sublime Text Keyboard Shortcuts</a></li>
<li><a href="http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_osx.html">Keyboard Shortcuts</a></li>
<li><a href="http://scotch.io/bar-talk/best-of-sublime-text-3-features-plugins-and-settings">Best of Sublime Text 3: Features, Plugins, and Settings</a></li>
<li><a href="http://www.hongkiat.com/blog/sublime-code-snippets/">Working With Code Snippets In Sublime Text</a></li>
<li><a href="http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/">Sublime Text 2 Tips and Tricks</a></li>
<li><a href="http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-project-bliss/">Sublime Text 2 Project Bliss</a></li>
</ul>


<h3>Add Shortcut to Mac</h3>

<pre><code>cd /
ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /bin/subl
subl [fileName] (for edit in sublime text)
</code></pre>

<h2>Distraction Free Mode</h2>

<p>Active by:</p>

<pre><code>Control + Shift + Command + F
</code></pre>

<p>My Setting:</p>

<pre><code>{
   "line_numbers": false,      
   "gutter": false,            
   "draw_centered": true,      
   "wrap_width": 80,           
   "word_wrap": true,          
   "scroll_past_end": true     
}   
</code></pre>

<h3>Useful Keyboard Shortcuts &mdash;OSX</h3>

<pre><code>Shift + Command + P         //Access the Command Palette
Command + P                 //Fast File Switching
Command + R                 //Goto Symbols
Shift + Comand + T          //Open Rencent Closed File
Command + [ or ]            //indent
Ctrl + m                    //Jump between the {}
ctrl + shift + M            //Select of all section between {}
Command + /                 //Comment
Command + Option + /        //Comment block 
Command + L                 //Line selection
Option + Arrow_key          //word by word
Shift + Command + f         //Search for whole project
Commond + Option + f        //replace
Option + Command + [1,2,..] //layout window
</code></pre>

<h3>Enable multi-selection, you have several options:</h3>

<ul>
<li>Press <strong>Alt</strong> or <strong>Command</strong> and then click in each region where you require a cursor.</li>
<li>Shift + Control + (Arrow_Key)</li>
<li>Command + d: Select the current word and the next same word</li>
<li>Select a block of lines, and then press <code>Shift + Command + L</code></li>
<li>Add an additional cursor at all occurrences of a word by typing <strong>Ctrl+Command+G</strong></li>
</ul>


<h2>Suggest Package</h2>

<ul>
<li>Alignment</li>
<li>Emmet</li>
<li>Colorpicker</li>
<li>SublimeCodeIntel</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started Mongoose]]></title>
    <link href="http://falconzy.github.io/blog/2013/12/31/mongoose/"/>
    <updated>2013-12-31T23:50:48+08:00</updated>
    <id>http://falconzy.github.io/blog/2013/12/31/mongoose</id>
    <content type="html"><![CDATA[<h3>installation</h3>

<pre><code>$ npm install mongoose
</code></pre>

<h3>Connection</h3>

<pre><code>var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/tasks');
var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function callback () {
// conding here;
//Once connection opens,callback will be called here.
});
</code></pre>

<h3>Disconnect</h3>

<pre><code>mongoose.disconnect();
</code></pre>

<h3>REGISTERING A SCHEMA</h3>

<p>With Mongoose, everything is derived from a <em>Schema</em>.</p>

<pre><code>var Schema = mongoose.Schema;
var Tasks = new Schema({
        project: String,
        description: String
});
</code></pre>

<p>Next step is compiling our schema into a <em>Model</em>.</p>

<pre><code>mongoose.model('Task', Tasks);
</code></pre>

<h3>ADDING A TASK</h3>

<pre><code>var Task = mongoose.model('Task');
var task = new Task();
task.project = 'Bikeshed';
task.description = 'Paint the bikeshed red.';
task.save(function(err) {
    if (err) throw err;
    console.log('Task saved.');
});
</code></pre>

<h3>SEARCHING FOR A DOCUMENT</h3>

<pre><code>var Task = mongoose.model('Task');
Task.find({'project': 'Bikeshed'}).each(function(err, task) {
    if (task != null) {
        console.log('ID:' + task._id);
        console.log(task.description);
        } 
});
</code></pre>

<h3>UPDATING A DOCUMENT</h3>

<pre><code>var Task = mongoose.model('Task');
Task.update(
    {_id: '4e65b793d0cf5ca508000001'}, \\Update using internal ID
    {description: 'Paint the bikeshed green.'},
    {multi: false}, \\Only update one document
    function(err, rows_updated) {
        if (err) throw err;
        console.log('Updated.');
    }
);
</code></pre>

<h3>REMOVING A DOCUMENT</h3>

<pre><code>var Task = mongoose.model('Task');
    Task.findById('4e65b3dce1592f7d08000001', function(err, task) {
    task.remove();
});
</code></pre>

<h3>Extra</h3>

<p>add <em>methods</em> to our documents:</br>
<strong>methods must be added to the schema before compiling it with mongoose.model()</strong></p>

<pre><code>Tasks.methods.list = function () {
var greeting = this.name
    ? "Meow name is " + this.name
    : "I don't have a name"
    console.log(greeting);
}
var Kitten = mongoose.model('Kitten', kittySchema)
</code></pre>

<p><em>Functions</em> added to the <em>methods</em> property of a schema get compiled into the Model prototype and exposed on each document instance:</p>

<pre><code>var fluffy = new Kitten({ name: 'fluffy' });
fluffy.speak() // "Meow name is fluffy"
</code></pre>

<p>Each document can be saved to the database by calling its <em>save</em> method. The first argument to the callback will be an error if any occured.</p>

<pre><code>fluffy.save(function (err, fluffy) {
    if (err) // TODO handle the error
    fluffy.speak();
});
</code></pre>

<p>We can access all of the documents through model.</p>

<pre><code>Kitten.find(function (err, kittens) {
    if (err) // TODO handle err
    console.log(kittens)
})
</code></pre>

<p>filter by name, Mongoose supports MongoDBs rich <em>querying syntax</em>.</p>

<pre><code>Kitten.find({ name: /^Fluff/ }, callback)
</code></pre>

<p>This performs a search for all documents with a name property that begins with &ldquo;Fluff&rdquo; and returns the results to the callback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth 2.0]]></title>
    <link href="http://falconzy.github.io/blog/2013/12/28/oauth-2-dot-0/"/>
    <updated>2013-12-28T16:16:51+08:00</updated>
    <id>http://falconzy.github.io/blog/2013/12/28/oauth-2-dot-0</id>
    <content type="html"><![CDATA[<p>Summaries on :
OAuth 2.0 â€“ The Good, The Bad &amp; The Ugly
<a href="http://net.tutsplus.com/tutorials/oauth-2-0-the-good-the-bad-the-ugly/">http://net.tutsplus.com/tutorials/oauth-2-0-the-good-the-bad-the-ugly/</a></p>

<h2>What is OAuth?</h2>

<p>OAuth is an open standard for authorization. OAuth provides a method for clients to access server resources on behalf of a resource owner (such as a different client or an end-user). It also provides a process for end-users to authorize third-party access to their server resources without sharing their credentials (typically, a username and password pair), using user-agent redirections.</p>

<p>OAuth is a service that is complementary to, and therefore distinct from, OpenID. OAuth is also distinct from OATH, which is a reference architecture for authentication (i.e. not a standard).</p>

<h2>Key Words of OAuth</h2>

<ul>
<li><strong>Resource Owner</strong> : An entity capable of granting access to a protected resource. Most of the time, itâ€™s an end-user.</li>
<li><strong>Client</strong> : An application making protected resource requests on behalf of the resource owner and with its authorization. It can be a server-based, mobile (native) or a desktop application.</li>
<li><strong>Resource Server</strong> : The server hosting the protected resources, capable of accepting and responding to protected resource requests.</li>
<li><strong>Authorization Server</strong> : The server issuing access grants/tokens to the client after successfully authenticating the resource owner and obtaining authorization.</li>
<li><strong>Access Token</strong> : Access tokens are credentials presented by the client to the resource server to access protected resources. Itâ€™s normally a string consisting of a specific scope, lifetime and other access attributes and it may self contain the authorization information in a verifiable manner.</li>
<li><strong>Refresh Token</strong> : Although not mandated by the spec, access tokens ideally have an expiration time which can last anywhere from a few minutes to several hours. Once an access token is expired, the client can request the authorization server to issue a new access token using the refresh token issued by the authorization server.</li>
</ul>


<h2>OAuth 2.0 in Depth</h2>

<p>Before initiating the protocol, the client must <em>register with the authorization server</em> by providing its client type, its redirection URL (where it wants the authorization server to redirect to after the resource owner grants or rejects the access) and any other information required by the server and in turn, is given a client identifier and client secret (client_secret). This process is known as <strong>Client Registration</strong>.</p>

<h2>The Web Server Flow</h2>

<p>Since this is a redirection-based flow, the client must be able to interact with the resource ownerâ€™s user agent (which in most cases is a web browser) and hence is typically suited for a web application. The below diagram is a birdâ€™s eye view of how the end-user (or the resource owner) uses the client application (web-server based application in this case) to authenticate and authorize with the authorization server, in order to access the resources protected by the resource server.</p>

<p><img class="center" src="http://falconzy.github.io/images/web_server_flow.jpg" width="600" height="450" title="Web Server Flow" ></p>

<h2>Authenticate &amp; Authorize the Client</h2>

<p><a href="https://developers.google.com/oauthplayground/">https://developers.google.com/oauthplayground/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Octopress Blog With Github]]></title>
    <link href="http://falconzy.github.io/blog/2013/12/26/hello-octopress/"/>
    <updated>2013-12-26T20:42:38+08:00</updated>
    <id>http://falconzy.github.io/blog/2013/12/26/hello-octopress</id>
    <content type="html"><![CDATA[<h2>Follow the Gudie: </h2>

<ul>
<li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
<li><a href="http://octopress.org/docs/configuring/">Configuration</a></li>
<li><a href="http://octopress.org/docs/blogging/">Blog Posts</a></li>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></li>
<li><a href="http://daringfireball.net/projects/markdown/basics">Markdown: Basics</a></li>
</ul>


<h2>Troubleshooting</h2>

<hr />

<p>Here are some problem i face during the <em>installation and setup</em> process,hope it helps you:</br></p>

<h2>Error 1</h2>

<blockquote><p>You have already activated rake 10.1.1, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.</p>

<h2>solution :</h2>

<p>modify the &ldquo;Gemfile&rdquo;, changed to
<code>gem &lsquo;rake&rsquo;, &lsquo;~> 10.1.1&rsquo;</code></p></blockquote>

<h2>Error 2</h2>

<blockquote><p>Fail to deply when run &ldquo;rake deploy&rdquo;</p>

<h2>solution :</h2>

<p><code>
when Octopress runs commond rake depoly, it will push two brance to Github, one call &ldquo;source&rdquo;, it&rsquo;s all your octopress code, another call &ldquo;master&rdquo;, it&rsquo;s the gernerated html file to display your website. need to make sure all your brance up to date before you run &ldquo;rake deploy&rdquo;.
</code></p></blockquote>

<h2>Extra Reading</h2>

<ul>
<li><a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">Getting Started with Octopress</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">MarkDown Syntax</a></li>
<li><a href="http://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac/">How to Install &amp; Configure Octopress on a Mac, and Host Your Static Website on Amazon S3</a></li>
<li><a href="http://www.darkcoding.net/software/markdown-quick-reference/">Markdown quick reference</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
